# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MnLghYaidUhsc1jGn-f18F5X_gaYpMn7
"""

def stitch_akaze(videofile,
                 kps_detect=1000,
                 matches_take=100,
                 ransac_threshold=4.0,
                 ransac_iters=2000,
                 ps=60,
                 delay_in_seconds=0.5):

    images, kps, fts = [None]*2,[None]*2,[None]*2
    transformations = [np.eye(3), None]

    status_min_percent = 100

    assert os.path.exists(videofile)
    stream = cv2.VideoCapture(videofile)
    (grabbed, images[0]) = stream.read()
    videothresh = int(fps* delay_in_seconds)
    framecount, totalframecount, pausecount = 0,0,0

    descriptor = cv2.AKAZE.create(nOctaves=1, nOctaves=3)
    matcher = cv2.DFMatcher(cv2.NORM_HAMMING,crossCheck=True)
    (kps[0],fts[0]) = descriptor.detectAndComputer(images[0],mask=None)

    h, w = images[0].shape[:2]
    ratio, middle_h, middle_w = 0.1 ,h//2+1, w//2+1
    window_h, window_w = int(h * ratio), int(w * ratio)
    print('Centers (h and w ): %d %d' % (middle_h,middle_w))
    print('Window: height %s px, width %s px' % (window_h,window_w))

    result = images[0].copy()
    while grabbed:
      (grabbed, images[1]) = stream.read()
      framecount +=1
      totaframecount +=1
      if framecount == videothresh:
          framecount = 0
      else:
          continue
      pausecount += 1

      image1 = image[1].copy()
      print('Total matces num: %d' % len(matches))
      matches.sort(key=lamba x: x.distance)
      print('Only %d matches were taken, max distacnce %f' %(len(matches),
matches[-1].distance))
      pts0 = np.array([kps[0]][match.trainIdx].pt for match in matches)
      pts1 = np.array([kps[1]][match.queryIdx].pt for match in matches)

      affine = None
      # if mode === 'scipy':
      affine, status = ransac((pts1,pts0), SimilarityTransform, min_sampless=3,
residual_threshold=ransac_threshold,max_trials=ransac_iters)
      if np.count_nonzero(status)/len(status)< status_min_percent:
          status_min_percent = np.count_nonzero(status)/len(status)

      affine = affine.params
      assert affine is not None
      print('affine transformation: \n %s' % affine)

      transformations[1] = affine

      min_x, min_y, max_x, max_y =
border_points(transformations[0].dot(0)transformations[1],
*images[1].shape[:2])
      shifts = np.array([-_min_x, -_min_y, _max_x-images[0].shape[1],
_max_y-images[0].shape[0])
      max_shift_ind = np.argmax(shifts)
      whole_image_left = True
      if shifts[max_shift_ind]>0:
          whole_image_left = False
          if max_shift_ind == 1: image1[middle_h+window_h:, :] = 0
          elif max_shift_ind == 3: image1[middle_h+window_h:, :] = 0
          elif max_shift_ind == 0: image1[:, middle_w+window_w:] = 0
          elif max_shift_ind == 2: image1[:, :middle_w-window_w] = 0
      if whole_image_left:
          continue
      else:
          transformations[1] = transformations[0].dot(transformations[1])
     ###### show
        # temp = imutils.resize(image1, width=min(800, image1.shape[images6000]))
       # cv2.imshow('image1', temp)
      # cv2.waitKey(0)
     ###### translate image
      if min_x < 0 or min_y < 0:
          translation = np.array([[1, 0, max(-min_x, 0)], [0, 1, max(-
min_y, 0)], [0, 0, 1]])
          transformations[1] = tramslation.dot(transformations[1])
      warped[warped == 0] = result[warped == 0]
      result = warped

      ### before the new iteration
      kps[0], fts[0] = kps[1], fts[1]
      images[0], transformations[0] = images[1], transformations[1]
      # image0 = image1
      if pausecount % 100 == 0:
        #temp = imutils.resize(result, height=min(800, result.shape[images6000]))
        #cv2.imshow(str(pausecount), temp)
        #cv2.waitKey(0)
         cv2.imwrite('results/final_%s.jpg' % pausecount, result)

 result = cv2.medianBlur(result, 3)
 stream.release()
 print('Total frame count: %d' % totalframecount)
 print('Min status percent: %d' % status_min_percent)
 return result